"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("nativescript-angular/router");
var page_1 = require("ui/page");
var grid_layout_1 = require("ui/layouts/grid-layout");
var animation_1 = require("ui/animation");
var platform_1 = require("platform");
var app = require("application");
var builder = require("ui/builder");
var welcome_slides_service_1 = require("./welcome-slides.service");
var WelcomeComponent = /** @class */ (function () {
    function WelcomeComponent(page, nav, slidesService) {
        this.page = page;
        this.nav = nav;
        this.slidesService = slidesService;
        this.slidesPath = 'pages/welcome/slides';
        this.slideFiles = ['slide1.xml', 'slide2.xml', 'slide3.xml'];
        this.currentSlideNum = 0;
        this.slideCount = 3;
        this.screenWidth = platform_1.screen.mainScreen.widthDIPs;
        // Span the background under status bar on Android
        if (platform_1.isAndroid && platform_1.device.sdkVersion >= '21') {
            var View = android.view.View;
            var window = app.android.startActivity.getWindow();
            window.setStatusBarColor(0x000000);
            var decorView = window.getDecorView();
            decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
        }
    }
    WelcomeComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.page.actionBarHidden = true;
        this.page.cssClasses.add("welcome-page-background");
        this.page.backgroundSpanUnderStatusBar = true;
        this.slideView = this.slideElement.nativeElement;
        this.loadSlides(this.slidesService.getSlides()).then(function (slides) {
            var row = new grid_layout_1.ItemSpec(1, grid_layout_1.GridUnitType.STAR);
            var gridLayout = new grid_layout_1.GridLayout();
            slides.forEach(function (element, i) {
                grid_layout_1.GridLayout.setColumn(element, 0);
                if (i > 0)
                    element.opacity = 0;
                gridLayout.addChild(element);
            });
            gridLayout.addRow(row);
            _this.slideView.content = (_this.slidesView = gridLayout);
        });
    };
    WelcomeComponent.prototype.loadSlides = function (slides) {
        return new Promise(function (resolve, reject) {
            var slideViews = [];
            slides.forEach(function (slide, i) {
                slideViews.push(builder.parse(slide));
            });
            resolve(slideViews);
        });
    };
    WelcomeComponent.prototype.skipIntro = function () {
        // this.nav.navigate(["/home"], { clearHistory: true });
        this.nav.navigate(["/student-register"]);
    };
    WelcomeComponent.prototype.onSwipe = function (args) {
        var prevSlideNum = this.currentSlideNum;
        var count = this.slideCount;
        if (args.direction == 2) {
            this.currentSlideNum = (this.currentSlideNum + 1) % count;
        }
        else if (args.direction == 1) {
            this.currentSlideNum = (this.currentSlideNum - 1 + count) % count;
        }
        else {
            // We are interested in left and right directions
            return;
        }
        var currSlide = this.slidesView.getChildAt(prevSlideNum);
        var nextSlide = this.slidesView.getChildAt(this.currentSlideNum);
        this.animate(currSlide, nextSlide, args.direction);
    };
    WelcomeComponent.prototype.animate = function (currSlide, nextSlide, direction) {
        nextSlide.translateX = (direction == 2 ? this.screenWidth : -this.screenWidth);
        nextSlide.opacity = 1;
        var definitions = new Array();
        var defn1 = {
            target: currSlide,
            translate: { x: (direction == 2 ? -this.screenWidth : this.screenWidth), y: 0 },
            duration: 500
        };
        definitions.push(defn1);
        var defn2 = {
            target: nextSlide,
            translate: { x: 0, y: 0 },
            duration: 500
        };
        definitions.push(defn2);
        var animationSet = new animation_1.Animation(definitions);
        animationSet.play()
            .then(function () {
            // console.log("Animation finished");
        })
            .catch(function (e) {
            console.log(e.message);
        });
    };
    WelcomeComponent.prototype.itemSelected = function (item) {
        console.log(item);
    };
    WelcomeComponent.prototype.getSliderItemClass = function (item) {
        if (item == this.currentSlideNum)
            return "caro-item-dot caro-item-dot-selected";
        return "caro-item-dot";
    };
    __decorate([
        core_1.ViewChild('slideContent'),
        __metadata("design:type", core_1.ElementRef)
    ], WelcomeComponent.prototype, "slideElement", void 0);
    WelcomeComponent = __decorate([
        core_1.Component({
            selector: "welcome",
            moduleId: module.id,
            templateUrl: "./welcome.component.html"
        }),
        __metadata("design:paramtypes", [page_1.Page,
            router_1.RouterExtensions,
            welcome_slides_service_1.WelcomeSlidesService])
    ], WelcomeComponent);
    return WelcomeComponent;
}());
exports.WelcomeComponent = WelcomeComponent;
//# sourceMappingURL=data:application/json;base64,